#+BLOG: noise on the net
#+POSTID: 242
#+DATE: [2023-09-24 dom 17:46]
#+BLOG: noise on the net
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Language learning
#+TAGS: Python
#+DESCRIPTION: when you start python some basic function are available which will be useful in next chapters
#+title: Python Tutorial: a few built-in basic functions
https:/noise/wp-content/uploads/2023/09/jonathan-borba-xRDuEeG1TVI-unsplash-scaled.jpg
Photo by [[https://unsplash.com/@jonathanborba?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText][Jonathan Borba]] on [[https://unsplash.com/photos/xRDuEeG1TVI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText][Unsplash]]

functions or procedures are python code executed using the familiar mathematical syntax

#+begin_src python
launch_rocket(300000,"Moon")
#+end_src

Python comes with many predefined function, we just will list a few of them
because they are so useful and we will use them in next chapters (try them!)
#+begin_export html
<br/>
#+end_export
Some of them like ~help~ or ~dir~ are quite curious -- I'd suggest you to peruse
them to explore python from within python CLI itself
#+begin_export html
<br/>
#+end_export
We will also dedicate a more comprehensive chapter on this topic later

#+begin_export html
<script src="https://modularizer.github.io/pyprez/pyprez.min.js"></script>
#+end_export
* print
this is the first and most useful function we meet; in its basic usage will
print one or more value into our output, different

#+begin_export html
<pyprez-editor>
print("get ready...â™¥")
print(5,3,2,1,0,"rocket launch")
</pyprez-editor>
#+end_export

* input
the input function will print its argument and collect your typing until you hit
return

#+begin_export html
<pyprez-editor>
answer = input("how went the launch?")
print("I see,", answer)
</pyprez-editor>
#+end_export

it always returns a string
* len
this function will return the size of a container e.g.

#+begin_export html
<pyprez-editor>
crate = ["beer","beer","beer"]
print("the crate contains",len(crate),"bottles of beer")
</pyprez-editor>
#+end_export

As some of you may already have imagined it also works for strings

#+begin_export html
<pyprez-editor>
poppins_magic = "supercalifragilisticespiralidosus"
print("always wanted to check if this word is",len(poppins_magic),"letters long")
</pyprez-editor>
#+end_export

* sorted and reversed
these functions are quite self-explanative and makes sense with lists

#+begin_export html
<pyprez-editor>
ugly = ["words", "in", "alphabetical", "order"]
print(sorted(ugly))
print(list(reversed(ugly)))
</pyprez-editor>
#+end_export

the ~list~ function is needed to transform a "reversed" value object generated
by the reversed function into a regular list -- we will see this usage many
times and I promise to reveal the arcane reason behind it
* round
this function is useful with ~float~ and accepts an optional second argument
with the number of decimal digit, if this argument is omitted it returns an integer

#+begin_export html
<pyprez-editor>
print(round(3.1419))
print(round(3.1419, 3))
</pyprez-editor>
#+end_export

* min and max
if a container has a list of sortable objects these functions use the most
appropriate possible rule
#+begin_export html
<pyprez-editor>
nlist = [3,2,5,1]
wlist = ["Long", "life", "and", "prosper"]
print(max(nlist),min(nlist))
print(max(wlist),min(wlist))
</pyprez-editor>
#+end_export

* dir
this function can be applied to any python object and returns a list of its
attribute names.
#+begin_export html
<br/>
#+end_export
We will use it several times to explore python objects

#+begin_export html
<pyprez-editor>
print(dir(1))
print(dir(dir))
</pyprez-editor>
#+end_export

* help
python has a built-in portable documentation available directly from the command line!

#+begin_export html
<pyprez-editor>
help(dir)
</pyprez-editor>
#+end_export
